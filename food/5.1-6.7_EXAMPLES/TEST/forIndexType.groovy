gremlin> :remote config alias g forIndexType.g
==>g=forIndexType.g
gremlin> schema.describe()
==>schema.propertyKey("livedIn").Text().single().create()
schema.propertyKey("instructions").Text().single().create()
schema.propertyKey("country").Text().multiple().properties("livedIn").create()
schema.propertyKey("amount").Text().single().create()
schema.propertyKey("fridgeItem").Text().single().create()
schema.propertyKey("gender").Text().single().create()
schema.propertyKey("year").Int().single().create()
schema.propertyKey("calories").Int().single().create()
schema.propertyKey("stars").Int().single().create()
schema.propertyKey("sensor_id").Uuid().single().create()
schema.propertyKey("ISBN").Text().single().create()
schema.propertyKey("nickname").Text().multiple().create()
schema.propertyKey("name").Text().single().create()
schema.propertyKey("comment").Text().single().create()
schema.propertyKey("location").Point().single().create()
schema.propertyKey("timestamp").Timestamp().single().create()
schema.propertyKey("city_id").Text().single().create()
schema.edgeLabel("authored").multiple().create()
schema.edgeLabel("rated").multiple().properties("timestamp", "stars", "comment").create()
schema.edgeLabel("includedIn").multiple().create()
schema.edgeLabel("created").multiple().create()
schema.edgeLabel("includes").multiple().create()
schema.vertexLabel("meal").properties("name").create()
schema.vertexLabel("meal").index("byMeal").materialized().by("name").add()
schema.vertexLabel("ingredient").properties("name").create()
schema.vertexLabel("ingredient").index("byIngredient").materialized().by("name").add()
schema.vertexLabel("FridgeSensor").partitionKey("city_id").clusteringKey("sensor_id").properties("fridgeItem", "location").create()
schema.vertexLabel("FridgeSensor").index("search").search().by("location")..add()
schema.vertexLabel("author").properties("country", "name", "gender", "nickname").create()
schema.vertexLabel("author").index("search").search().by("name").asString().by("nickname").asText().add()
schema.vertexLabel("author").index("byName").secondary().by("name").add()
schema.vertexLabel("author").index("byLocation").property("country").by("livedIn").add()
schema.vertexLabel("book").properties("name", "year").create()
schema.vertexLabel("book").index("search").search().by("name").asString().by("year").add()
schema.vertexLabel("recipe").properties("name", "instructions").create()
schema.vertexLabel("recipe").index("search").search().by("instructions").asText().by("name").asString().add()
schema.vertexLabel("recipe").index("byRecipe").materialized().by("name").add()
schema.vertexLabel("reviewer").properties("name").create()
schema.vertexLabel("reviewer").index("byReviewer").materialized().by("name").add()
schema.vertexLabel("reviewer").index("ratedByStars").outE("rated").by("stars").add()
schema.vertexLabel("reviewer").index("ratedByTimestamp").outE("rated").by("timestamp").add()
schema.vertexLabel("reviewer").index("ratedByComments").outE("rated").by("comment").add()
schema.edgeLabel("authored").connection("author", "book").add()
schema.edgeLabel("rated").connection("reviewer", "recipe").add()
schema.edgeLabel("includedIn").connection("meal", "recipe").connection("book", "recipe").add()
schema.edgeLabel("created").connection("author", "recipe").add()
schema.edgeLabel("includes").connection("recipe", "ingredient").add()
