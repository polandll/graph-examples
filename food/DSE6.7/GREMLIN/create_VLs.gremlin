:remote config alias g food.g

// ********
// VERTEX LABELS
// ********
// SYNTAX:
// schema.vertexLabel('vertexLabel').
//    [ partitionKey(propertyKey, [ partitionKey(propertyKey) ]) ].
//    [ clusteringKey(propertyKey) ].
//    [ ttl ].
//    [ properties(property, property) ].
//    [ index ].
//    [ partition() ].
//    [ cache() ].
//    [ ifNotExists() ].
//    [ create() | add() | describe() | exists() ]
// ********

// SINGLE-KEY VERTEX ID
schema.vertexLabel('person').partitionKey('person_id').create()
// ********* NEED TO ADD BADGE TO PERSON !!! USED FOR REVIEWS ***********
// ==>{badge=[Silver Badge, Gold Badge], gender=[F], name=[Jane Doe]}
// ==>{badge=[Gold Badge], gender=[M], name=[Jon Doe]}
// gremlin> g.V().properties('badge').valueMap()
// ==>{since=2005}
// ==>{since=2011}
// ==>{since=2012}
schema.vertexLabel('person').properties('name','nickname','gender','cal_goal','macro_goal','country').add()
schema.vertexLabel('book').partitionKey('book_id').create()
schema.vertexLabel('book').properties('name','publish_year','isbn').add()
schema.vertexLabel('meal_item').partitionKey('item_id').create()
schema.vertexLabel('meal_item').properties('name','serv_amt', 'macro', 'calories').add()
schema.vertexLabel('ingredient').partitionKey('ingred_id').create()
schema.vertexLabel('ingredient').properties('name').add()
schema.vertexLabel('home').partitionKey('home_id').create()
schema.vertexLabel('home').properties('name','address').add()
schema.vertexLabel('store').partitionKey('store_id').create()
schema.vertexLabel('store').properties('name','address').add()
schema.vertexLabel('recipe').partitionKey('recipe_id').create()
schema.vertexLabel('recipe').properties('name','cuisine', 'instructions','notes').add()
// GEOSPATIAL
schema.vertexLabel('location').partitionKey('loc_id').create()
schema.vertexLabel('location').properties('name', 'geo_point').add()
// MULTIPLE-KEY VERTEX ID
schema.vertexLabel('meal').partitionKey('type', 'meal_id').create()
// COMPOSITE KEY VERTEX ID
schema.vertexLabel('fridgeSensor').partitionKey('state_id', 'city_id', 'zipcode_id').clusteringKey('sensor_id').create()
schema.vertexLabel('fridgeSensor').properties('name').add()
