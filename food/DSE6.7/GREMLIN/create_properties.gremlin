:remote config alias g food.g

// ********
// CALCULATED VALUES
// ********
// THERE ARE SOME CALCULATED VALUES USED IN RECIPE:
// vertexLabel: recipe calcValue: avgRating
// vertexLabel: meal calcValue: calories

// ********
// PROPERTY KEYS
// ********
// SYNTAX:
// propertyKey('name').
//    type().
//    [ single() | multiple() ].
//    [ ttl ].
//    [ properties(metadata_property) ].
//    [ ifNotExists() ].
//    [ create() | add() | describe() | exists() | drop() ]
// DEFAULT IS SINGLE CARDINALITY
// ********

// SINGLE CARDINALITY PROPERTY KEY
schema.propertyKey('personId').Int().single().create()
schema.propertyKey('mealId').Int().single().create()
schema.propertyKey('itemId').Int().single().create()
schema.propertyKey('recipeId').Int().single().create()
schema.propertyKey('bookId').Int().single().create()
schema.propertyKey('ingredId').Int().single().create()
schema.propertyKey('homeId').Int().single().create()
schema.propertyKey('storeId').Int().single().create()
schema.propertyKey('locId').Text().single().create()
schema.propertyKey('stateId').Int().single().create()
schema.propertyKey('cityId').Int().single().create()
schema.propertyKey('zipcodeId').Int().single().create()
schema.propertyKey('sensorId').Int().single().create()
schema.propertyKey('name').Text().single().create()
schema.propertyKey('gender').Text().single().create()
schema.propertyKey('calGoal').Int().single().create()
schema.propertyKey('macroGoal').Text().single().create()
schema.propertyKey('publishYear').Int().single().create()
schema.propertyKey('ISBN').Text().single().create()
schema.propertyKey('bookDiscount').Text().ttl(604800).create()
schema.propertyKey('instructions').Text().single().create()
schema.propertyKey('notes').Text().single().create()
schema.propertyKey('type').Text().single().create()
schema.propertyKey('servAmt').Text().single().create()
schema.propertyKey('macro').Text().single().create()
schema.propertyKey('calories').Int().single().create()
schema.propertyKey('geoPoint').Point().withGeoBounds().create()
schema.propertyKey('address').Text().single().create()
schema.propertyKey('amount').Text().single().create()
// MULTIPLE CARDINALITY PROPERTY KEY
schema.propertyKey('nickname').Text().multiple().create()
schema.propertyKey('cuisine').Text().multiple().create()
// MULTIPLE CARDINALITY PROPERTY KEY WITH SINGLE CARDINALITY META-PROPERTY
schema.propertyKey('since').Int().single().create() // meta-property
schema.propertyKey('badge').Text().multiple().properties('since').create()
// MULTIPLE CARDINALITY PROPERTY KEY WITH MULTIPLE CARDINALITY META-PROPERTY
schema.propertyKey('startYear').Int().multiple().create()   // meta-property
schema.propertyKey('endYear').Int().multiple().create()   // meta-property
schema.propertyKey('country').Text().multiple().properties('startYear','endYear').create()

// EDGE PROPERTIES
schema.propertyKey('numServ').Int().single().create()
schema.propertyKey('mealDate').Date().single().create()
schema.propertyKey('useDate').Date().single().create()
schema.propertyKey('createDate').Date().single().create()
schema.propertyKey('expireDate').Date().single().create()
schema.propertyKey('stars').Int().single().create()
schema.propertyKey('time').Time().single().create()
schema.propertyKey('year').Date().single().create()
schema.propertyKey('comment').Text().single().create()
