// TRAVERSAL EXAMPLES

------------------------------------------------------
/* SIMPLE TRAVERSAL:                                */
/* traverses through a series of traversal steps    */
------------------------------------------------------

// How many recipes exist in the database?
// OLAP
// really need to limit the traversal for large graphs
// using a limit()
g.V().hasLabel('recipe').count()
==>8

// How many recipes has Julia Child written?
// OLAP
g.V().hasLabel('recipe').in().has('name','Julia Child').count()
==>3
// BETTER, WORKS BECAUSE ONLY RECIPES ARE 'CREATED'
g.V().in('created').has('name','Julia Child').count()
// MAKE THIS OLTP
g.V().has('author', 'name', 'Julia Child').outE('created').count()

// Which recipes list beef as an ingredient?
// OLAP
g.V().hasLabel('recipe').out().has('name','beef').in().hasLabel('recipe').values('name')
==>Beef Bourguignon
// BETTER
g.V().out('includes').has('name','beef').in('includes').values('name')
// MAKE THIS OLTP
g.V().has('ingredient', 'name', 'beef').in('includes').values('name')

// Which recipes list beef or carrots as ingredients?
// OLAP
g.V().hasLabel('recipe').out().has('name',within('beef','carrots')).in().hasLabel('recipe').values('name')
==>Beef Bourguignon
==>Carrot Soup
// BETTER OLAP
g.V().out('includes').has('name', within('carrots','beef')).in('includes').values('name')
Step counts: 61, 39, 2, 2, 2
// OLTP
g.V().has('ingredient', 'name', within('carrots','beef')).in('includes').values('name')
Step counts: 2, 2, 2

// Which cookbooks list Julia Child as an author?
// OLTP
g.V().has('author','name','Julia Child').out('authored').values('name')
==>The Art of French Cooking, Vol. 1
==>The French Chef Cookbook

// Which cookbooks were published in 1968?
// OLTP
g.V().has('book', 'year',1968).values('name')
==>The French Chef Cookbook

// Which cookbooks did Julia Child write after 1968?
// OLTP
g.V().has('author','name','Julia Child').out('authored').has('year', gte(1968)).values('name')
==>The French Chef Cookbook

// What cookbooks have recipes that list beef or carrots as ingredients, order by title?
// OLAP
// OLTP if ingredient name is indexed
g.V().hasLabel('recipe').out().
	has('iName',within('beef','carrots')).
	in().hasLabel('recipe').
	out().hasLabel('book').values('bookTitle').
	order()
==>The Art of French Cooking, Vol. 1
==>The Art of Simple Food: Notes, Lessons, and Recipes from a Delicious Revolution
// BETTER OLAP
g.V().out('includes').has('ingredient','name', within('beef','carrots')).
  in('includes').out('includedIn').values('name').
  order()
// OLTP
g.V().has('ingredient', 'name', within('beef','carrots')).
  in('includes').out('includedIn').values('name').
  order()

// THIS EXAMPLE USES UNION, BUT THIS IS A BAD EXAMPLE OF USING union()
//union() is slower and has no explicit order
g.V().out('includes').union(has('name','beef'),has('name','carrots')).
  in('includes').out('includedIn').values('name')
==>The Art of Simple Food: Notes, Lessons, and Recipes from a Delicious Revolution
==>The Art of French Cooking, Vol. 1

// What are the recipes included in the cookbooks that list beef or carrots as ingredients?
// OLAP
// OLTP if ingredient name is indexed
// Note that 'name' is used 3x; first as ingredient name, then book name, and finally recipe name
g.V().has('ingredient', 'name',within('beef','carrots')).
	in().as('Recipe').
	out().hasLabel('book').as('Book').
	select('Book','Recipe').by('name').by('name')
==>[Book:The Art of French Cooking, Vol. 1, Recipe:Beef Bourguignon]
==>[Book:The Art of Simple Food: Notes, Lessons, and Recipes from a Delicious Revolution, Recipe:Carrot Soup]
// BETTER OLAP
g.V().has('ingredient', 'name', within('beef','carrots')).
  in('includes').as('Recipe').out('includedIn').as('Book').
  select('Book','Recipe').
    by('name').by('name')

// Profile to discover how various traversal strategies will work for a query
// This profiles the last traversal
g.V().has('recipe', 'name', 'Beef Bourguignon').inE('rated').values('comment').profile().cap(TraversalMetrics.METRICS_KEY)
==>Traversal Metrics
Step                                                               Count  Traversers       Time (ms)    % Dur
=============================================================================================================
DsegGraphStep([~label.eq(recipe), recipeTitle.e...                     1           1          15.717    92.51
  query-optimizer                                                                              0.094
  iterator-setup                                                                               0.006
DsegVertexStep(IN,[rated],edge)                                        4           4           1.159     6.82
  query-optimizer                                                                              0.135
  iterator-setup                                                                               0.003
DsegPropertiesStep([comment],value)                                    3           3           0.083     0.49
SideEffectCapStep([~metrics])                                          1           1           0.029     0.17
                                            >TOTAL                     -           -          16.989        -


// TimeLimit of 2 ms for the traversal
g.V().has('recipe', 'name', 'Beef Bourguignon').inE('rated').values('comment').timeLimit(2)
==>Yummy!
==>Pretty tasty!
==>It was okay.

// Using multiple vertex labels in a search
g.V().hasLabel('author', 'recipe').valueMap()
==>[gender:[F], name:[Kelsie Kerr]]
==>[gender:[F], name:[Louisette Bertholie]]
==>[gender:[M], name:[Emeril Lagasse]]
==>[gender:[F], name:[Julia Child]]
==>[gender:[M], name:[Fritz Streiff]]
==>[gender:[M], name:[James Beard]]
==>[gender:[F], name:[Simone Beck]]
==>[gender:[F], name:[Julia Child]]
==>[gender:[F], name:[Patricia Curtan]]
==>[gender:[F], name:[Patricia Simon]]
==>[gender:[F], name:[Alice Waters]]
==>[instructions:[Braise the beef. Saute the onions and carrots. Add wine and cook in a dutch oven at 425 degrees for 1 hour.], name:[Beef Bourguignon]]
==>[instructions:[Saute the shallots, celery, herbs, and seasonings in 3 tablespoons of the butter for 3 minutes. Add the watercress and let it wilt.], name:[Oysters Rockefeller]]
==>[instructions:[Cook the egg noodles according to the package directions and keep warm. Heat 1 1/2 tablespoons of the oliveoil in a large saute pan over medium-high heat.], name:[Wild Mushroom Stroganoff]]
==>[instructions:[The day before, separate the meat from the ribs, stopping about 1 inch before the end of the bones. Season the pork liberally insmyIde and out with salt and pepper and refrigerate overnight.], name:[Roast Pork Loin]]
==>[instructions:[In a heavy-bottomed pot, melt the butter. When it starts to foam, add the onions and thyme and cook over medium-low heat until tender, about 10 minutes.], name:[Carrot Soup]]
==>[instructions:[Take a salad bowl or platter and line it with lettuce leaves, shortly before serving. Drizzle some olive oil on the leaves and dust them with salt.], name:[Salade Nicoise]]
==>[instructions:[Preheat the oven to 375 degrees F. Cook bacon in a large skillet over medium heat until very crisp and fat has rendered, 8-10 minutes.], name:[Spicy Meatloaf]]
==>[instructions:[Peel and cut the egglant. Make sure you cut eggplant into lengthwise slices that are about 1-inch wmyIde, 3-inches long, and 3/8-inch thick], name:[Rataouille]]

// How many reviewers have reviewed Beef Bourguignon?
g.V().has('recipe', 'name','Beef Bourguignon').in().hasLabel('reviewer').count()
==>4
// BETTER
g.V().has('recipe', 'name','Beef Bourguignon').in('rated').count()

// What did reviewers say about Beef Bourguignon?
g.V().has('recipe', 'name', 'Beef Bourguignon').inE().values('comment')
==>Yummy!
==>Pretty tasty!
==>It was okay.
// MORE PRECISE - doesn't have to check all incoming edges
g.V().has('recipe', 'name', 'Beef Bourguignon').inE('rated').values('comment')

// What reviewers rated Beef Bourguignon in the last 15 days?
//*******************
//*******************
// ************************* SEE DANIEL'S COMMENTS ******
// https://gist.github.com/dkuppitz/505fe9a6c79f6edf20ae
// NOT SURE HOW TO DO "last 15 days" -- now()-15 is a placeholder
// Don't need to include "hasLabel('recipe')" because reviewers only have edges to recipes
g.V().hasLabel('reviewer').outE().has('reviewDate',lt(now()-15)).outV().has('recipeTitle','Beef Bourguignon')

// Which reviewers who rated Beef Bourguignon with 5 stars rated other recipes?
// NEED HELP WITH THIS ONE -- probably another type of TRAVERSAL
//********************
//********************

// HERE IS SOMETHING TO CHEW ON
//********************
//********************
// What other recipes did reviewers who rated Beef Bourguignon with 5 stars also rate with 5 stars?
// Group and count the recipes by their name.
g.V().has('recipe', 'name', 'Beef Bourguignon').as('a').
  inE('rated').has('stars',5).outV().outE('rated').has('stars',5).
  inV().where(neq('a')).groupCount().by('name')
==>[Carrot Soup:1]

//VARIANT
// Sort group count map in decreasing order by count. Clip map to top 10 and stream out map's entries.
g.V().has('recipe', 'name', 'Beef Bourguignon').as('a').
  inE('rated').has('stars',gte(3)).outV().outE('rated').has('stars',gte(3)).
  inV().where(neq('a')).groupCount().by('name').order(local).by(valueDecr).
  limit(local,10).unfold()
==>Spicy Meatloaf=2
==>Carrot Soup=1

// Which reviewers who rated Beef Bourguignon have also rated other recipes, and what are the recipes?
//********************
//********************
// HOW DO I GET THE NAMES TO PRINT???
g.V().has('recipe', 'name', 'Beef Bourguignon').
	in().hasLabel('reviewer').as('a').
	out().values('name').as('b').
	select('a','b')
==>[a:v[{member_id=0, community_id=278744, ~label=reviewer, group_id=1}], b:Carrot Soup]
==>[a:v[{member_id=0, community_id=278744, ~label=reviewer, group_id=1}], b:Beef Bourguignon]
==>[a:v[{member_id=0, community_id=278744, ~label=reviewer, group_id=58}], b:Beef Bourguignon]
==>[a:v[{member_id=0, community_id=278744, ~label=reviewer, group_id=58}], b:Spicy Meatloaf]
==>[a:v[{member_id=0, community_id=278744, ~label=reviewer, group_id=59}], b:Beef Bourguignon]
==>[a:v[{member_id=0, community_id=278744, ~label=reviewer, group_id=60}], b:Beef Bourguignon]
==>[a:v[{member_id=0, community_id=278744, ~label=reviewer, group_id=60}], b:Spicy Meatloaf]

// Which meals list Beef Bourguignon as an item?
g.V().hasLabel('recipe', 'name','Beef Bourguignon').in('includedIn').values('name')
==>Saturday Feast
==>JuliaDinner

// Which meals have a calorie count of 900 calories or less? 
g.V().has('meal', 'calories', lte(900)).values('name')
==>EverydayDinner
==>JuliaDinner

// Which meals have a calorie count of 900 calories or less (limit the output to 10 meal names)? 
g.V().has('meal', 'calories', lte(900)).values('name').limit(10)
==>EverydayDinner
==>JuliaDinner

----------------------------------------------------------
/* BRANCHING TRAVERSAL:					*/
/* traversal will be sent down a single branch		*/ 
/* (choose), a subset of branches (repeat.emit)		*/ 
/* or all branches (union)				*/
----------------------------------------------------------

// If the vertex selected is an author, then count the number of outgoing edges "created"; 
// else if the vertex selected is a reviewer, then count the number of outgoing
// edges "rated"; otherwise, do nothing.
g.V().choose(label()).
 option("author", out("created").count()).
 option("reviewer", out("rated").count()).
 option(none, label())
 
// example I tried
gremlin> :> g.V().choose(label()).option('author', out('created').count()).option('reviewer', out('rated').count())
==>0
==>0
==>2
==>0
==>0
==>0
==>2
==>1
==>0
==>0
==>0
==>3
==>0
==>2
==>2
==>1
==>2

----------------------------------------------------------
/* RECURSIVE TRAVERSAL:					*/
/* loops to traverse a step already traversed		*/
----------------------------------------------------------

// Return the names of the vertices 2 outgoing steps from the vertex named "Julia Child". 
This will likely include cookbooks, meals, reviewers, and ingredients.
g.V().has('name','Julia Child').repeat(out()).times(2).valueMap()
==>[name:[JuliaDinner], calories:[900], timestamp:[2016-01-14T00:00:00Z]]
==>[name:[beef]]
==>[name:[onion]]
==>[name:[mashed garlic]]
==>[name:[butter]]
==>[name:[tomato paste]]
==>[name:[The Art of French Cooking, Vol. 1], timestamp:[1961]]
==>[name:[mashed garlic]]
==>[name:[eggplant]]
==>[name:[zucchini]]
==>[name:[olive oil]]
==>[name:[yellow onion]]
==>[name:[olive oil]]
==>[name:[green beans]]
==>[name:[tuna]]
==>[name:[tomato]]
==>[name:[hard-boiled egg]]
==>[name:[The Art of French Cooking, Vol. 1], timestamp:[1961]]

// THREE TIMES
g.V().has('name','Julia Child').repeat(out()).times(3).valueMap()
==>[instructions:[Braise the beef. Saute the onions and carrots. Add wine and cook in a dutch oven at 425 degrees for 1 hour.], name:[Beef Bourguignon]]
==>[instructions:[Take a salad bowl or platter and line it with lettuce leaves, shortly before serving. Drizzle some olive oil on the leaves and dust them with salt.], name:[Salade Nicoise]]
==>[name:[JuliaDinner], calories:[900], timestamp:[2016-01-14T00:00:00Z]]

----------------------------------------------------------
/* PATH TRAVERSAL:					*/
/* maps traverse step to a location to use in case a 	*/
/* step must revisit a previous location in the full 	*/
/* traversal						*/
----------------------------------------------------------

// GENERAL CASE
g.V().as("a").out().as("b","c").path()
// WHAT IS THE PATH TRAVERSAL OF THE GIVEN TRAVERSAL?
// INGREDIENT -> RECIPE -> BOOK
g.V().has('ingredient', 'name',within('beef','carrots')).in('includes').as('Recipe').
	out().hasLabel('book').as('Book').
	select('Book','Recipe').
		by('name').by('name').path()
==>[v[{~label=ingredient, member_id=2, community_id=1442590464}], 
	v[{~label=recipe, member_id=2, community_id=473764096}], 
	v[{~label=book, member_id=0, community_id=568859392}], 
	{Book=The Art of French Cooking, Vol. 1, Recipe=Beef Bourguignon}]
==>[v[{~label=ingredient, member_id=1, community_id=684566272}], 
	v[{~label=recipe, member_id=0, community_id=1462084224}], 
	v[{~label=book, member_id=1, community_id=1620680576}], 
	{Book=The Art of Simple Food: Notes, Lessons, and Recipes from a Delicious Revolution, Recipe=Carrot Soup}]

// What is the tree that emanates from a book?	
gremlin> :> g.V().hasLabel('book').in().tree().by('name').next()
==>Simca's Cuisine: 100 Classic French Recipes for Every Occasion=
	{Patricia Simon={}, Simone Beck={}}
==>The Art of French Cooking, Vol. 1=
	{Simone Beck={}, Julia Child={}, Beef Bourguignon={}, Louisette Bertholie={}, Salade Nicoise={}}
==>The Art of Simple Food: Notes, Lessons, and Recipes from a Delicious Revolution=
	{Alice Waters={}, Kelsie Kerr={}, Roast Pork Loin={}, Carrot Soup={}, Fritz Streiff={}, Patricia Curtan={}}
==>The French Chef Cookbook=
	{Julia Child={}}

// What is the tree that emanates from a recipe?
gremlin> :> g.V().hasLabel('recipe').in().tree().by('name').next()
==>Roast Pork Loin={Alice Waters={}, EverydayDinner={}}
==>Spicy Meatloaf={Emeril Lagasse={}, John Doe={}, Sharon Smith={}}
==>Beef Bourguignon={John Smith={}, John Doe={}, Sharon Smith={}, Saturday Feast={}, Julia Child={}, JuliaDinner={}, Jane Doe={}}
==>Carrot Soup={Alice Waters={}, Saturday Feast={}, EverydayDinner={}, Jane Doe={}}
==>Rataouille={Julia Child={}}
==>Salade Nicoise={Julia Child={}, JuliaDinner={}}
==>Wild Mushroom Stroganoff={Emeril Lagasse={}}
==>Oysters Rockefeller={James Beard={}, Saturday Feast={}}

// What are all the outgoing tree branches for a recipe?
gremlin> :> g.V().hasLabel('recipe').out().tree().by('name').next()
==>Roast Pork Loin=
	{red wine={}, pork loin={}, chicken broth={}, The Art of Simple Food: Notes, Lessons, and Recipes from a Delicious Revolution={}}
==>Spicy Meatloaf=
	{bacon={}, celery={}, pork sausage={}, onion={}, ground beef={}, green bell pepper={}}
==>Beef Bourguignon=
	{mashed garlic={}, butter={}, The Art of French Cooking, Vol. 1={}, onion={}, tomato paste={}, beef={}}
==>Carrot Soup=
	{butter={}, onion={}, chicken broth={}, carrots={}, The Art of Simple Food: Notes, Lessons, and Recipes from a Delicious Revolution={}, thyme={}}
==>Rataouille=
	{mashed garlic={}, yellow onion={}, olive oil={}, zucchini={}, eggplant={}}
==>Salade Nicoise=
	{tuna={}, The Art of French Cooking, Vol. 1={}, hard-boiled egg={}, olive oil={}, tomato={}, green beans={}}
==>Wild Mushroom Stroganoff=
	{mushrooms={}, yellow onion={}, egg noodles={}}
==>Oysters Rockefeller=
	{oyster={}, chervil={}, parsley={}, celery={}, fennel={}, shallots={}, Pernod={}}

----------------------------------------------------------
/* PROJECTING TRAVERSAL:				*/
/* ???							*/
----------------------------------------------------------

// WRITE THIS ONE
g.V().as("a").out("knows").as("b").
select("a","b").
by(in("knows").count()).
by(out("knows").count())

----------------------------------------------------------
/* CENTRALITY TRAVERSAL:				*/
/* uses graph statstics to extract meaningful 		*/
/* information from the graph				*/
----------------------------------------------------------

// WHAT DOES THIS ONE MEAN?
g.V().repeat(groupCount("m").out()).times(4).cap("m")
==>{v[{~label=ingredient, member_id=0, community_id=1317776640}]=5, 
v[{~label=ingredient, member_id=2, community_id=2089732736}]=3, 
v[{~label=author, member_id=0, community_id=1247462272}]=1, 
v[{~label=recipe, member_id=2, community_id=473764096}]=2, 
v[{~label=ingredient, member_id=1, community_id=1245449856}]=3, 
v[{~label=ingredient, member_id=0, community_id=1317139328}]=3, 
v[{~label=recipe, member_id=3, community_id=1476505856}]=2, 
v[{~label=ingredient, member_id=3, community_id=645970304}]=3, 
v[{~label=author, member_id=1, community_id=1957363328}]=1, 
v[{~label=ingredient, member_id=2, community_id=1479653760}]=3, 
v[{~label=author, member_id=0, community_id=1034199936}]=1, 
v[{~label=book, member_id=0, community_id=126004352}]=10, 
v[{~label=ingredient, member_id=4, community_id=1353535872}]=3, 
v[{~label=recipe, member_id=0, community_id=921065344}]=2, 
v[{~label=meal, member_id=1, community_id=49445120}]=5, 
v[{~label=ingredient, member_id=2, community_id=1756292608}]=3, 
v[{~label=ingredient, member_id=4, community_id=1453788288}]=3, 
v[{~label=recipe, member_id=2, community_id=815739008}]=2, 
v[{~label=ingredient, member_id=4, community_id=1591539456}]=3, 
v[{~label=author, member_id=1, community_id=204499456}]=1, 
v[{~label=ingredient, member_id=0, community_id=2082975232}]=3, 
v[{~label=ingredient, member_id=2, community_id=1160133760}]=3, 
v[{~label=author, member_id=0, community_id=8404224}]=1, 
v[{~label=ingredient, member_id=4, community_id=1355985664}]=5, 
v[{~label=book, member_id=1, community_id=1917309696}]=2, 
v[{~label=ingredient, member_id=0, community_id=1800032896}]=3, 
v[{~label=recipe, member_id=2, community_id=877239296}]=2, 
v[{~label=meal, member_id=3, community_id=408493696}]=5, 
v[{~label=ingredient, member_id=3, community_id=676226048}]=3, 
v[{~label=ingredient, member_id=1, community_id=684566272}]=3, 
v[{~label=ingredient, member_id=2, community_id=1442590464}]=3, 
v[{~label=author, member_id=0, community_id=504834048}]=1, 
v[{~label=ingredient, member_id=3, community_id=1920784896}]=3, 
v[{~label=ingredient, member_id=1, community_id=88266880}]=3, 
v[{~label=ingredient, member_id=3, community_id=1590033664}]=5, 
v[{~label=author, member_id=0, community_id=359465216}]=1, 
v[{~label=ingredient, member_id=3, community_id=58345088}]=3, 
v[{~label=author, member_id=0, community_id=719887360}]=1, 
v[{~label=ingredient, member_id=0, community_id=1819456768}]=5, 
v[{~label=ingredient, member_id=1, community_id=1391581312}]=3, 
v[{~label=recipe, member_id=0, community_id=1462084224}]=2, 
v[{~label=ingredient, member_id=1, community_id=745523072}]=7, 
v[{~label=ingredient, member_id=2, community_id=669949824}]=3, 
v[{~label=ingredient, member_id=1, community_id=887650944}]=3, 
v[{~label=book, member_id=0, community_id=568859392}]=13, 
v[{~label=ingredient, member_id=2, community_id=6696832}]=5, 
v[{~label=ingredient, member_id=3, community_id=887528832}]=3, 
v[{~label=ingredient, member_id=1, community_id=1885419008}]=3, 
v[{~label=ingredient, member_id=1, community_id=1096839040}]=5, 
v[{~label=author, member_id=0, community_id=1223858560}]=1, 
v[{~label=author, member_id=0, community_id=835463808}]=1, 
v[{~label=recipe, member_id=1, community_id=758174464}]=2, 
v[{~label=book, member_id=1, community_id=1620680576}]=12, 
v[{~label=ingredient, member_id=2, community_id=43078016}]=3, 
v[{~label=recipe, member_id=1, community_id=799572864}]=2, 
v[{~label=meal, member_id=1, community_id=1611367808}]=7}

----------------------------------------------------------
/* MUTATING TRAVERSAL:					*/
/* mutates the graph					*/
----------------------------------------------------------

// adds an inverse edge isAuthoredBy for every authored edge
g.V().as('a').out('authored').addE('isAuthoredBy').to('a')
// removes the original created edge
g.V().outE('authored').drop()
// These two actions can be done in a single query:
// g.V().as('a').outE('authored').sideEffect(inV().addE('isAuthoredBy').to('a')).drop()

----------------------------------------------------------
/* DECLARATIVE TRAVERSAL:				*/
/* pattern matching traversal				*/
----------------------------------------------------------

// WRITE THIS ONE
g.V().match(
  __.as("a").out("created").as("b"),
  __.as("b").in("created").count().is(gt(3)),
  __.as("b").in("created").as("c"),
  __.as("a").out("father").as("c")).
 dedup("a").
 select("a").by("name")

----------------------------------------------------------
/* DOMAIN SPECIFIC TRAVERSAL:				*/
/* creating traversals using domain-specific language 	*/
/* maps to Gremlin steps				*/
----------------------------------------------------------

//FOR RECIPE TOY GRAPH
g.people().named("marko").
 who().know(well).people().
 who().created("software").
 are().named()

Each one of these steps would be the composite or 1 or more
Gremlin steps.

g.people()          → g.V().hasLabel('person')
named('marko')      → has('name','marko')
who()               → identity()
know(well)          → outE("knows").
                      has("weight",gt(0.75)).
                      inV()
created("software") → out("created").
                      hasLabel("software")
are()               → identity()
named()             → values("name")