// Create property keys for Classic graph


// ********
// CALCULATED VALUES
// ********
// THERE ARE SOME CALCULATED VALUES USED IN RECIPE:
// vertexLabel: recipe calcValue: avgRating
// vertexLabel: meal calcValue: calories

// ********
// PROPERTY KEYS
// ********
// SYNTAX:
// propertyKey('name').
//    type().
//    [ single() | multiple() ].
//    [ ttl ].
//    [ properties(meta_property) ].
//    [ ifNotExists() ].
//    [ create() | add() | describe() | exists() | drop() ]
// DEFAULT IS SINGLE CARDINALITY
// ********

#START-createProps_classic

// SINGLE CARDINALITY PROPERTY KEY
schema.propertyKey('person_id').Uuid().single().create()
schema.propertyKey('meal_id').Int().single().create()
schema.propertyKey('item_id').Int().single().create()
schema.propertyKey('recipe_id').Int().single().create()
schema.propertyKey('book_id').Int().single().create()
schema.propertyKey('ingred_id').Int().single().create()
schema.propertyKey('home_id').Int().single().create()
schema.propertyKey('store_id').Int().single().create()
schema.propertyKey('loc_id').Text().single().create()
schema.propertyKey('state_id').Int().single().create()
schema.propertyKey('city_id').Int().single().create()
schema.propertyKey('zipcode_id').Int().single().create()
schema.propertyKey('sensor_id').Int().single().create()
schema.propertyKey('name').Text().single().create()
schema.propertyKey('gender').Text().single().create()
schema.propertyKey('cal_goal').Int().single().create()
schema.propertyKey('macro_goal').Text().single().create()
schema.propertyKey('publish_year').Int().single().create()
schema.propertyKey('isbn').Text().single().create()
schema.propertyKey('category').Text().multiple().create()
schema.propertyKey('book_discount').Text().ttl(604800).create()
schema.propertyKey('instructions').Text().single().create()
schema.propertyKey('notes').Text().single().create()
schema.propertyKey('type').Text().single().create()
schema.propertyKey('serv_amt').Text().single().create()
schema.propertyKey('macro').Text().single().create()
schema.propertyKey('calories').Int().single().create()
schema.propertyKey('geo_point').Point().withGeoBounds().create()
schema.propertyKey('address').Text().single().create()
schema.propertyKey('amount').Text().single().create()
// MULTIPLE CARDINALITY PROPERTY KEY
schema.propertyKey('nickname').Text().multiple().create()
schema.propertyKey('cuisine').Text().multiple().create()
// MULTIPLE CARDINALITY PROPERTY KEY WITH SINGLE CARDINALITY META-PROPERTY
schema.propertyKey('since').Date().single().create() // meta-property
schema.propertyKey('badge').Text().multiple().properties('since').create()
// MULTIPLE CARDINALITY PROPERTY KEY WITH MULTIPLE CARDINALITY META-PROPERTY
schema.propertyKey('start_date').Date().multiple().create()   // meta-property
schema.propertyKey('end_date').Date().multiple().create()   // meta-property
schema.propertyKey('country').Text().multiple().properties('start_date','end_date').create()

// EDGE PROPERTIES
schema.propertyKey('num_serv').Int().single().create()
schema.propertyKey('meal_date').Date().single().create()
schema.propertyKey('use_date').Date().single().create()
schema.propertyKey('create_date').Date().single().create()
schema.propertyKey('expire_date').Date().single().create()
schema.propertyKey('stars').Int().single().create()
schema.propertyKey('time').Time().single().create()
schema.propertyKey('year').Date().single().create()
schema.propertyKey('comment').Text().single().create()
#END-createProps_classic
