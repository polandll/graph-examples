// VERTEX LABELS
// ********
// SYNTAX:
// schema.vertexLabel('vertexLabel')
//    [ .ifNotExists() ]
//    .partitionBy('propertyName', propertyType) [ ... ]
//    [ .clusterBy('propertyName', propertyType) ... ]
//    [ .property('propertyName', propertyType) ]
//    [ .create() | .describe() | .addProperty('propertyName', propertyType).alter() ]

 
// SINGLE PARTITION KEY Vertex Labels

// macro_goal is a list of carbohydrate, protein, fat
// country is a list of tuple of country, start date, end date; replacement for a meta-property in classic graph
// Also, country demonstrates multi-property, being a list of countries and dates lived in
//    country, start_date, end_date
// badge is  a replacement for a meta-property in earlier versions
//    level:year, such as gold:2015, expert:2019, or sous-chef:2009 (mainly expect to use for reviewers)

// NEED TO ADD NEW FEATURE DSP_18625
//  .tableName('personTable')

#START-createVLs

schema.vertexLabel('person').
  ifNotExists().
  partitionBy('person_id', Uuid).
  property('name', Text).
  property('gender', Text).
  property('nickname', setOf(Text)).
  property('cal_goal', Int).
  property('macro_goal', listOf(Int)).
  property('country', listOf(tupleOf(Text, Date, Date))).
  property('badge', mapOf(Text, Date)).
  create()

// book_discount was a property in the old data model that had a ttl; I'm including here to use the same datasets 

schema.vertexLabel('book').
  ifNotExists().
  partitionBy('book_id', Int).
  property('name', Text).
  property('publish_year', Int).
  property('isbn', Text).
  property('category', setOf(Text)).
  // Add as an added property 
  //property('book_discount', Text).
  create()

// Going to create vertexLabel recipe through converting a CQL table to a VL
// Although the notebook shows creating a table for recipe with CQL, then converting,
// this is the Gremlin schema to make the recipe vertex label

schema.vertexLabel('recipe').
  ifNotExists().
  partitionBy('recipe_id', Int).
  property('name', Text).
  property('cuisine', setOf(Text)).
  property('instructions', Text).
  property('notes', Text).
  create()
 
schema.vertexLabel('meal_item').
  ifNotExists().
  partitionBy('item_id', Int).
  property('name', Text).
  property('serv_amt', Text).
  property('macro', listOf(Int)).
  property('calories', Int).
  create()

schema.vertexLabel('ingredient').
  ifNotExists().
  partitionBy('ingred_id', Int).
  property('name', Text).
  create()

schema.vertexLabel('home').
  ifNotExists().
  partitionBy('home_id', Int).
  property('name', Text).
  create()

schema.vertexLabel('store').
  ifNotExists().
  partitionBy('store_id', Int).
  property('name', Text).
  create()


// MULTIPLE-KEY VERTEX ID

schema.vertexLabel('meal').
  ifNotExists().
  partitionBy('type', Text).
  partitionBy( 'meal_id', Int).
  create()

// COMPOSITE KEY VERTEX ID

schema.vertexLabel('fridge_sensor').
  ifNotExists().
  partitionBy('state_id', Int).
  partitionBy('city_id', Int).
  partitionBy('zipcode_id', Int).
  clusterBy('sensor_id', Int).
  property('name', Text).
  create()

// GEOSPATIAL

schema.vertexLabel('location').
  ifNotExists().
  partitionBy('loc_id', Text).
  property('name', Text).
  property('loc_details', frozen(typeOf('location_details'))).
  property('geo_point', Point).
  create()

// STATIC COLUMN

schema.vertexLabel('flag').
  ifNotExists().
  partitionBy('country_id', Int).
  clusteringBy('country', Text).
  property('flag', Text, Static).
  create()
#END-createVLs
