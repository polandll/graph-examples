:remote config alias g newComp.g
schema.config().option('graph.allow_scan').set('true')

//****** ADDED TO QUERY/TRAVERSAL PAGES

// Generates review vertices and edges for Recipe Toy Graph
:load /tmp/generateReviews.groovy

// GET A COUNT OF REVIEWS
g.V().hasLabel('reviewer').count()
//5

// GET THE VALUES FOR ALL REVIEWERS TO CHECK
g.V().hasLabel('reviewer').values()
//John Smith
//Sharon Smith
//Betsy Jones
//Jane Doe
//John Doe

// What did John Doe have to say in his recipe reviews?
g.V().has('reviewer', 'name','John Doe').outE('rated').values('comment')
//Pretty tasty!
//Really spicy - be careful!

//Which recipes did John Doe review?
g.V().has('reviewer', 'name','John Doe').outE('rated').inV().values('name')
//Beef Bourguignon
//Spicy Meatloaf

// GET THE VALUEMAP FOR EACH EDGE THAT HAS MORE THAN 3 STARS
g.E().hasLabel('rated').has('stars', gt(3)).valueMap()
//[stars:4, timestamp:2014-01-23]
//[comment:Yummy!, stars:5, timestamp:2014-02-01]
//[comment:Loved this soup! Yummy vegetarian!, stars:5, timestamp:2015-12-30]
//[comment:Pretty tasty!, stars:5, timestamp:2014-01-01]
//[comment:Really spicy - be careful!, stars:4, timestamp:2015-12-31]

// GET THE RECIPES THAT HAVE A RATING HIGHER THAN 3 STARS
 g.E().hasLabel('rated').has('stars', gt(3)).inV().values('name')
//Beef Bourguignon
//Spicy Meatloaf
//Beef Bourguignon
//Carrot Soup
//Beef Bourguignon

// GET THE VALUEMAP FOR EACH EDGE THAT HAS MORE THAN 3 STARS AND A RATED DATE GREATER THAN JAN 1, 2015
g.E().hasLabel('rated').has('stars',gte(4)).has('timestamp', gte(Instant.parse('2015-01-01T00:00:00.00Z'))).valueMap()
//[comment:Loved this soup! Yummy vegetarian!, timestamp:2015-12-30T00:00:00Z, stars:5]
//[comment:Really spicy - be careful!, timestamp:2015-12-31T00:00:00Z, stars:4]

// MEAN STARS
g.E().hasLabel('rated').values('stars').mean()
//4.142857142857143

// FIND  THE MAX NUMBER OF RECIPE REVIEWS BY A SINGLE REVIEWER
g.V().hasLabel('reviewer').map(outE('rated').count()).max()
//2

g.V().hasLabel('reviewer').as('reviewer','starCount').
  select('reviewer','starCount').
    by('name').
    by(outE('rated').values('stars').mean())
//[reviewer:Jane Doe, starCount:5.0]
//[reviewer:Betsy Jones, starCount:NaN]
//[reviewer:John Doe, starCount:4.5]
//[reviewer:John Smith, starCount:4.0]
//[reviewer:Sharon Smith, starCount:3.0]

g.V().hasLabel('reviewer').as('reviewer','starCount').
  select('reviewer','starCount').
    by('name').
    by(outE('rated').values('stars').mean()).
  order().by(select('starCount'), decr)
//[reviewer:Betsy Jones, starCount:NaN]
//[reviewer:Jane Doe, starCount:5.0]
//[reviewer:John Doe, starCount:4.5]
//[reviewer:John Smith, starCount:4.0]
//[reviewer:Sharon Smith, starCount:3.0]

g.V().hasLabel('reviewer').as('reviewer','starCount').
  select('reviewer','starCount').
    by('name').
    by(coalesce(outE('rated').values('stars'),constant(0)).mean()).
  order().by(select('starCount'), decr)
//[reviewer:Jane Doe, starCount:5.0]
//[reviewer:John Doe, starCount:4.5]
//[reviewer:John Smith, starCount:4.0]
//[reviewer:Sharon Smith, starCount:3.0]
//[reviewer:Betsy Jones, starCount:0.0]

// get the schema with datatypes
graph.schema().traversal().V().valueMap(true)
// partial output
//{mode=[Development], id=0, label=schema}
//{name=[recipe], id=22, label=vertexLabel}
//{name=[ingredient], id=23, label=vertexLabel}
//{name=[book], id=24, label=vertexLabel}
//{name=[meal], id=25, label=vertexLabel}
//{name=[reviewer], id=26, label=vertexLabel}
//{name=[byName], id=32919, type=[Secondary], label=vertexIndex}
//{name=[includedIn], id=32917, directionality=[Bidirectional], cardinality=[Multiple], label=edgeLabel}
//{name=[rated], id=32918, directionality=[Bidirectional], cardinality=[Multiple], label=edgeLabel}
//{id=135, label=incident}
//{id=139, label=incident}
//{id=143, label=incident}
//{dataType=[Timestamp], name=[timestamp], id=32904, cardinality=[Single], label=propertyKey}
//{id=88, label=incident}
//{dataType=[Text], name=[ISBN], id=32905, cardinality=[Single], label=propertyKey}
//{dataType=[Text], name=[category], id=32902, cardinality=[Single], label=propertyKey}
//{name=[byLocation], id=32924, label=propertyIndex}
//{dataType=[Int], name=[year], id=32903, cardinality=[Single], label=propertyKey}
//{name=[ratedByStars], id=32925, directionality=[OUT], label=edgeIndex}
//{dataType=[Text], name=[gender], id=32900, cardinality=[Single], label=propertyKey}
//{unique=[false], name=[byIngredient], id=32922, type=[Materialized], label=vertexIndex}
//{dataType=[Text], name=[instructions], id=32901, cardinality=[Single], label=propertyKey}
//{unique=[false], name=[byReviewer], id=32923, type=[Materialized], label=vertexIndex}
//{unique=[false], name=[byRecipe], id=32920, type=[Materialized], label=vertexIndex}
//{unique=[false], name=[byMeal], id=32921, type=[Materialized], label=vertexIndex}
//{id=160, label=incident}
//{dataType=[Int], name=[stars], id=32908, cardinality=[Single], label=propertyKey}
//{dataType=[Text], name=[comment], id=32909, cardinality=[Single], label=propertyKey}
//{dataType=[Int], name=[calories], id=32906, cardinality=[Single], label=propertyKey}
//{dataType=[Text], name=[//], id=32929, cardinality=[Single], label=propertyKey}
//{dataType=[Text], name=[amount], id=32907, cardinality=[Single], label=propertyKey}
//{id=113, label=incident}
//{id=117, label=incident}
//{name=[created], id=32915, directionality=[Bidirectional], cardinality=[Multiple], label=edgeLabel}
//{name=[includes], id=32916, directionality=[Bidirectional], cardinality=[Multiple], label=edgeLabel}
//{dataType=[Bigint], name=[member_id], id=32913, cardinality=[Single], label=propertyKey}
//{name=[authored], id=32914, directionality=[Bidirectional], cardinality=[Multiple], label=edgeLabel}
//{dataType=[Text], name=[country], id=32911, cardinality=[Multiple], label=propertyKey}
//{dataType=[Int], name=[community_id], id=32912, cardinality=[Single], label=propertyKey}
//{dataType=[Text], name=[livedIn], id=32910, cardinality=[Single], label=propertyKey}
//{dataType=[Text], name=[name], id=32899, cardinality=[Single], label=propertyKey}
//{name=[author], id=21, label=vertexLabel}
  
// What star rating did a reviewer give a recipe?
g.V().hasLabel('reviewer').as('reviewer','rating').out().as('recipe').
select('reviewer','rating','recipe').
  by('name').
  by(outE('rated').values('stars')).
  by(values('name'))
  
//{reviewer=John Doe, starCount=5, recipe=Beef Bourguignon}
//{reviewer=John Doe, starCount=5, recipe=Spicy Meatloaf}
//{reviewer=John Smith, starCount=4, recipe=Beef Bourguignon}
//{reviewer=Jane Doe, starCount=5, recipe=Beef Bourguignon}
//{reviewer=Jane Doe, starCount=5, recipe=Carrot Soup}
//{reviewer=Sharon Smith, starCount=3, recipe=Beef Bourguignon}
//{reviewer=Sharon Smith, starCount=3, recipe=Spicy Meatloaf}

// For each recipe reviewed, get the number of reviews and the mean star rating for the recipe
g.V().hasLabel('recipe').as('recipe','numberOfReviews','meanRating').
  select('recipe','numberOfReviews','meanRating').
    by('name').
    by(inE('rated').count()).
    by(inE('rated').values('stars').mean())
//{recipe=Beef Bourguignon, numberOfReviews=4, meanRating=4.25}
//{recipe=Wild Mushroom Stroganoff, numberOfReviews=0, meanRating=NaN}
//{recipe=Spicy Meatloaf, numberOfReviews=2, meanRating=3.5}
//{recipe=Rataouille, numberOfReviews=0, meanRating=NaN}
//{recipe=Salade Nicoise, numberOfReviews=0, meanRating=NaN}
//{recipe=Roast Pork Loin, numberOfReviews=0, meanRating=NaN}
//{recipe=Oysters Rockefeller, numberOfReviews=0, meanRating=NaN}
//{recipe=Carrot Soup, numberOfReviews=1, meanRating=5.0}

// RECIPES THAT CONTAIN BEEF
g.V().hasLabel('recipe').out().has('name','beef').in().hasLabel('recipe').values('name')
//Beef Bourguignon

// RECIPES THAT CONTAIN EITHER BEEF OR CARROTS
g.V().hasLabel('recipe').out().has('name',within('beef','carrots')).in().hasLabel('recipe').values('name')
//Beef Bourguignon
//Carrot Soup

// GET ALL INGREDIENTS USED IN A PARTICULAR RECIPE
g.V().match(
  __.as('a').hasLabel('ingredient'),
  __.as('a').in('includes').has('name','Beef Bourguignon')).
select('a').by('name')
//tomato paste
//beef
//onion
//mashed garlic
//butter

// Group all vertices by label and name
g.V().group().by(label).by('name')
//[meal:[JuliaDinner, Saturday Feast, EverydayDinner], ingredient:[olive oil, chicken broth, 
eggplant, pork sausage, green bell pepper, yellow onion, celery, hard-boiled egg, shallots, 
zucchini, butter, green beans, mashed garlic, onion, mushrooms, bacon, parsley, oyster, 
tomato, thyme, pork loin, tuna, tomato paste, ground beef, red wine, fennel, Pernod, 
chervil, egg noodles, carrots, beef], author:[Louisette Bertholie, Kelsie Kerr, 
Alice Waters, Julia Child, Emeril Lagasse, Simone Beck, Patricia Curtan, Patricia Simon, 
James Beard, Fritz Streiff], book:[Simca's Cuisine: 100 Classic French Recipes for Every 
Occasion, The French Chef Cookbook, The Art of Simple Food: Notes, Lessons, and Recipes 
from a Delicious Revolution, The Art of French Cooking, Vol. 1], recipe:[Wild Mushroom 
Stroganoff, Roast Pork Loin, Spicy Meatloaf, Rataouille, Beef Bourguignon, Oysters 
Rockefeller, Salade Nicoise, Carrot Soup], reviewer:[Sharon Smith, John Smith, Jane Doe, 
Betsy Jones, John Doe]]

// Group all books by year and name
g.V().hasLabel('book').group().by('year').by('name')
//{1968=[The French Chef Cookbook, The French Chef Cookbook], 
1972=[Simca's Cuisine: 100 Classic French Recipes for Every Occasion, Simca's Cuisine: 100 
Classic French Recipes for Every Occasion], 2007=[The Art of Simple Food: Notes, Lessons, 
and Recipes from a Delicious Revolution, The Art of Simple Food: Notes, Lessons, and Recipes 
from a Delicious Revolution], 1961=[The Art of French Cooking, Vol. 1, The Art of French 
Cooking, Vol. 1]}

g.V().hasLabel('author').as('author').out().properties('year').as('year').select('author','year').by('name').by().limit(2)
//{author=Julia Child, year=vp[year->1961]}
//{author=Julia Child, year=vp[year->1968]}

g.V().hasLabel('author').as('author').local(out().properties('year').as('year').limit(2)).select('author','year').by('name').by()
//{author=Julia Child, year=vp[year->1961]}
//{author=Julia Child, year=vp[year->1968]}
//{author=Simone Beck, year=vp[year->1961]}
//{author=Simone Beck, year=vp[year->1972]}
//{author=Louisette Bertholie, year=vp[year->1961]}
//{author=Patricia Simon, year=vp[year->1972]}
//{author=Alice Waters, year=vp[year->2007]}
//{author=Patricia Curtan, year=vp[year->2007]}
//{author=Kelsie Kerr, year=vp[year->2007]}
//{author=Fritz Streiff, year=vp[year->2007]}
//{author=Julia Child, year=vp[year->1961]}
//{author=Julia Child, year=vp[year->1968]}
//{author=Simone Beck, year=vp[year->1961]}
//{author=Simone Beck, year=vp[year->1972]}
//{author=Louisette Bertholie, year=vp[year->1961]}
//{author=Patricia Simon, year=vp[year->1972]}
//{author=Alice Waters, year=vp[year->2007]}
//{author=Patricia Curtan, year=vp[year->2007]}
//{author=Kelsie Kerr, year=vp[year->2007]}
//{author=Fritz Streiff, year=vp[year->2007]}

**************************
NOT ADDED TO EAP DOC YET
**************************

// How many books has each author written?
g.V().hasLabel('author').as('a','b').select('a','b').by('name').by(outE('authored').count())
//[a:Julia Child, b:2]
//[a:Patricia Curtan, b:1]
//[a:Fritz Streiff, b:1]
//[a:Kelsie Kerr, b:1]
//[a:James Beard, b:0]
//[a:Alice Waters, b:1]
//[a:Patricia Simon, b:1]
//[a:Simone Beck, b:2]
//[a:Louisette Bertholie, b:1]
//[a:Emeril Lagasse, b:0]

// How many books has each author written? (uses more descriptive labels for display)
 g.V().hasLabel('author').as('author','wrote').select('author','wrote').by('name').by(outE('authored').count())
//{author=Julia Child, wrote=2}
//{author=Simone Beck, wrote=2}
//{author=Louisette Bertholie, wrote=1}
//{author=Patricia Simon, wrote=1}
//{author=Alice Waters, wrote=1}
//{author=Patricia Curtan, wrote=1}
//{author=Kelsie Kerr, wrote=1}
//{author=Fritz Streiff, wrote=1}
//{author=Emeril Lagasse, wrote=0}
//{author=James Beard, wrote=0}

// How many recipes has Julia Child written?
g.V().hasLabel('recipe').in().has('name','Julia Child').count()
//3

// CLEANER VERSION OF LAST TRAVERSAL
g.V().hasLabel('ingredient').has('name',within('beef','carrots')).in().hasLabel('recipe').values('name')
//Beef Bourguignon
//Carrot Soup

USED IN graphOLTPvsOLAP.dita
g.V().hasLabel('recipe').in().has('name','Julia Child').count().profile()
//Traversal Metrics
Step                                                               Count  Traversers       Time (ms)    % Dur
=============================================================================================================
DsegGraphStep([~label.eq(recipe)])                                     8           8          17.134    17.43
  query-optimizer                                                                              0.399
  sub-query                                                                                    0.000
  iterator-setup                                                                               0.281
DsegVertexStep(IN,vertex)                                             13          13          17.106    17.40
  query-optimizer-total                                                                        0.117
  sub-query-total                                                                              0.000
  iterator-setup-total                                                                         1.885
HasStep([aname.eq(Julia Child)])                                       1           1          23.307    23.71
CountGlobalStep                                                        1           1          17.204    17.50
SideEffectCapStep([~metrics])                                          1           1          23.546    23.95
                                            >TOTAL                     -           -          98.299        -


*** 
IDEA: categories for recipes
separate vertex type?
****


*** DONE ABOVE WITH AUTHORS AND BOOKS
// For each category vertex, emit a map of its name and the number of movies it represents.
// Both a vertex type category and an edge label category - this is from movie lens
g.V().hasLabel('category').as('a','b').
 select('a','b').
    by('name').
    by(inE('category').count())
***************
    
// For each movie, emit a map of its name and average rating. Sort maps in decr. order by avg rating. Top 10 only
g.V().hasLabel('movie').as('a','b').
 select('a','b').
    by('name').
    by(inE('rated').values('stars').mean()).
  order().by(select('b'), decr).
  limit(10)
  
  actually needs to be this to fix empty stars value:
  
 g.V().hasLabel('movie').as('a','b').
  select('a','b').
    by('name').
    by(coalesce(
      inE('rated').values('stars'), constant()).mean()).
  order().by(select('b'), decr).
  limit(10) 
  
  // For each movie with at least 11 ratings emit a map of its name and avg rating. sort maps in decr order by avg rating. Top 10 only
  g.V().hasLabel('movie').as('a','b').
    where(inE('rated').count().is(gt(10))).
    select('a','b').
      by('name').
      by(inE('rated').values('stars').mean()).
    order().by(select('b'), decr).
    limit(10)
    
    // Which programmers like Die Hard and what other movies do they like? Group and count the movies by their name.
    // Sort group count map in decr order by count. Clip map to top 10 and stream out map's entries
    
  g.V().has('movie','name','Die Hard').as('a').
    inE('rated').has('stars',5).outV().
      where(out('occupation').has('name','programmer')).
    outE('rated').has('stars',5).inV(). 
      where(neq('a')).
    groupCount().by('name').
      order(local).by(valueDecr).
      limit(local,10).
      unfold()   // this puts each movie on its own line
