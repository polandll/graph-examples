// MATERIALIZED VIEW INDEX
// for predicates that are not search-specific or specific to CQL collections

schema.vertexLabel('person').
  materializedView('person_by_name').
  ifNotExists().
  partitionBy('name').
  create()

schema.vertexLabel('meal').
  materializedView('meal_by_type').
  ifNotExists().
  partitionBy('type').
  waitForIndex().
  create()

schema.vertexLabel('ingredient').
  materializedView('ingredient_by_name').
  ifNotExists().
  partitionBy('name').
  create()

// NEED SECONDARY INDEX
// for specific predicates (e.g. contains(x) / containsKey(x) / containsValue(x) / entryEq(x, y)) against CQL collections (Lists/Sets/Maps)

// Use IndexFor().analyze() to create a good example based on a collection

schema.indexFor(g.V().has("cuisine", contains('French'))).analyze()

// Traversal requires that the following indexes are created:

schema.vertexLabel('recipe').
  secondaryIndex('recipe_2i_by_cuisine').
  ifNotExists().
  by('cuisine').
  indexValues().
  create()

// SEARCH INDEX
// for specific predicates (e.g. token / regex / phrase / neq / ...) that can only be fulfilled by a search index

// ************* NEED TO MAKE SOME OF THESE asString() and asText() examples
// ************* DO I NEED AN asStringAndText() example? NO, NOT USED IN NGDG?
// ************* IT LOOKS LIKE INDEXFOR() WILL NOT PICK THESE PREDICATES - CHECK THAT

schema.vertexLabel('recipe').
  searchIndex().
  ifNotExists().
// by name, by cuisine can be asText, asString?
  by('instructions').
  by('name').
  by('cuisine').
  waitForIndex(30).
  create()

schema.vertexLabel('book').
  searchIndex().
  ifNotExists().
  by('name').
  by('publishYear').  
  create()

schema.vertexLabel('location').
  searchIndex().
  ifNotExists().
  by('geoPoint').
  create()

schema.vertexLabel('store').
  searchIndex().
  ifNotExists().
  by('name').
  create()

schema.vertexLabel('home').
  searchIndex().
  ifNotExists().
  by('name').
  create()

schema.vertexLabel('fridge_sensor').
  searchIndex().
  ifNotExists().
  by('cityId').
  by('sensorId').
  by('name').
  create()

