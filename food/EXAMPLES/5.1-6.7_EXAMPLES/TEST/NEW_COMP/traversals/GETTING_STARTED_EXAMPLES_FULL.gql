---------------------------------
|  // FOR CLEANUP                |
|     g.V().drop().iterate()     |
|     system.graph('test').drop()|
|  // TO GET WHAT GRAPHS EXIST   |
|     system.graphs()            |
---------------------------------

// NO LONGER REQUIRED
// CONNECT TO GREMLIN SERVER
//gremlin> :remote connect tinkerpop.server resources/graph/gremlin-console/conf/remote-objects.yaml
//==>Connected - localhost/127.0.0.1:8182

// CREATE GRAPH "TEST"
system.graph('test').ifNotExists().create()
// RESULT
//==>null

// CONFIG GRAPH TRAVERSAL g TO ALIAS test.g
:remote config alias g test.g
// RESULT
//==>g=test.g

// IS THIS STILL REQUIRED?
// CONFIG TIMEOUT TO MAXIMUM VALUE
:remote config timeout max
// RESULT
//==>Set remote timeout to 2147483647ms

// CHECK THAT NO VERTICES EXIST
// BAD TO DO FOR LARGE GRAPHS!!
g.V().count()
//=>0

// ENTER AUTHOR VERTEX
juliaChild = graph.addVertex(label,'author', 'name','Julia Child', 'gender','F')
// RESULT
// THIS CHANGES FOR CUSTOM ID
//==>v[{member_id=1, community_id=184435, ~label=author}]

// CHECK THAT ONE VERTEX NOW EXISTS
gremlin> g.V().count()
// RESULT
//=>1

// GET VALUEMAP
// BAD TO DO FOR LARGE GRAPHS!
g.V().valueMap()
// RESULT
//==>[gender:[F], name:[Julia Child], id:[1]]

// SHOW USE OF VALUES FOR ONE PROPERTY
// limit is used to get just one value back
// BAD TO DO FOR LARGE GRAPHS WITHOUT LIMIT
g.V().values('name').limit(1)
// RESULT
//==>Julia Child

// ENTER BOOK VERTEX
artOfFrenchCookingVolOne = graph.addVertex(label, 'book','name', 'The Art of French Cooking, Vol. 1', 'year', 1961)
// RESULT
// THIS CHANGES FOR CUSTOM ID
//==>v[{member_id=2, community_id=264788, ~label=book}]

// GET ALL BOOKS - THERE IS CURRENTLY ONLY ONE
// SAME BAD RESPONSE WITHOUT LIMIT
g.V().hasLabel('book').values('name')
// RESULT
//==>The Art of French Cooking, Vol. 1

// ENTER AUTHOR-BOOK EDGE
juliaChild.addEdge('authored', artOfFrenchCookingVolOne)
// RESULT
// THIS CHANGES FOR CUSTOM ID
//==>e[{out_vertex={member_id=1, community_id=184435, ~label=author}, local_id=312468c0-b99a-11e5-bdeb-e778035ca1a5, 
//in_vertex={member_id=2, community_id=113313, ~label=book}, ~type=authored}][{member_id=2, community_id=184435, 
//~label=author}-authored->{member_id=2, community_id=113313, ~label=book}]

// CHECK THAT EDGE IS CREATED USING COUNT
// BAD TO DO FOR LARGE GRAPHS!
g.E().count()
// RESULT
//==>1
----------
// LOAD A SCRIPT TO ADD MORE VERTICES AND EDGES
:load /tmp/generateRecipe.groovy'

// GET VERTEX FOR PARTICULAR AUTHOR
g.V().has('name','Julia Child')
// RESULT
//==>v[{member_id=1, community_id=184435, ~label=author}]

// GET EDGES FROM PARTICULAR AUTHOR VERTEX
g.V().has('name','Julia Child').outE('authored')
// RESULT
//==>e[{out_vertex={member_id=0, community_id=966350, ~label=author, group_id=3}, local_id=1c947f80-ba67-11e5-bdeb-e778035ca1a5, in_vertex={member_id=0, community_id=966350, ~label=book, group_id=14}, ~type=authored}][{member_id=0, community_id=966350, ~label=author, group_id=3}-authored->{member_id=0, community_id=966350, ~label=book, group_id=14}]
//==>e[{out_vertex={member_id=0, community_id=184435, ~label=author, group_id=4}, local_id=c41d5980-ba61-11e5-bdeb-e778035ca1a5, in_vertex={member_id=0, community_id=966350, ~label=book, group_id=1}, ~type=authored}][{member_id=0, community_id=184435, ~label=author, group_id=4}-authored->{member_id=0, community_id=966350, ~label=book, group_id=1}]

// GET BOOK TITLES FOR ALL AUTHORS
// Note duplication for multiple authors
g.V().outE('authored').inV().values('name')
// RESULT 
//==>The Art of Simple Food: Notes, Lessons, and Recipes from a Delicious Revolution
//==>The Art of Simple Food: Notes, Lessons, and Recipes from a Delicious Revolution
//==>Simca's Cuisine: 100 Classic French Recipes for Every Occasion
//==>The Art of French Cooking, Vol. 1
//==>The Art of Simple Food: Notes, Lessons, and Recipes from a Delicious Revolution
//==>The Art of French Cooking, Vol. 1
//==>Simca's Cuisine: 100 Classic French Recipes for Every Occasion
//==>The Art of French Cooking, Vol. 1
//==>The French Chef Cookbook

// DEDUPLICATE THE LAST LISTING
g.V().outE('authored').inV().values('name').dedup()
// RESULT
//==>Simca's Cuisine: 100 Classic French Recipes for Every Occasion
//==>The Art of French Cooking, Vol. 1
//==>The Art of Simple Food: Notes, Lessons, and Recipes from a Delicious Revolution
//==>The French Chef Cookbook

// GET BOOK TITLES FOR PARTICULAR AUTHOR
// Uses outE() and inV() which is overkill - edge information is not needed, just passed through
g.V().has('name','Julia Child').outE('authored').inV().values('name')
// RESULT
//==>The Art of French Cooking, Vol. 1
// RESULT
//==>The French Chef Cookbook

// GET BOOK TITLES FOR PARTICULAR AUTHOR
// Use out() which gets next vertex
g.V().has('name','Julia Child').out('authored').values('name')
// RESULT 
//==>The Art of French Cooking, Vol. 1
//==>The French Chef Cookbook

// GET BOOK TITLES FOR PARTICULAR AUTHOR WITH A PUBLISH DATE GREATER THAN 1967
g.V().has('name','Julia Child').out('authored').has('year', gt(1967)).values('name')
// RESULT
//==>The French Chef Cookbook

// FOR EACH VERTEX LABEL, GET THE NUMBER OF VERTICES
g.V().label().groupCount()
// RESULT
//==>[ingredient:31, author:10, book:4, recipe:8]

// WRITE THE DATA TO A GRYO FILE
graph.io(gryo()).writeGraph("/tmp/recipe.gryo")
// RESULT
//==>NULL

// LOAD DATA USING GRYO
// NO LONGER IN USE, GRAPHLOADER SHOULD BE USED
graph.io(gryo()).readGraph("/tmp/recipe.gryo")
// RESULT
//==>NULL
